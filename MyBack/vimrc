if ! exists("g:signature")
    let g:signature = "Leon Zhou"
    let g:mail = "<leonzhou@percipio.xyz>"
endif
set nocompatible  "关闭与VI的兼容
set number  "显示行号
filetype on
set history=1000
set background=dark "设置背景为灰色
syntax on  "打开语法高亮显示
set autoindent "自动对齐，使用上一行的对齐方式
set smartindent "智能对齐方式
set encoding=utf-8
set mouse=a
set tabstop=4
set ignorecase
set hlsearch
set shiftwidth=4
set expandtab
set showmatch  "设置匹配模式，类似当输入一个左括号时匹配上相应的那个右括号
set guioptions-=T
set vb t_vb=
set ruler "在编辑过程中，在右下角显示光标位置的状态行
set incsearch "搜索自动定位
set laststatus=2
set noswapfile
augroup filetype
au! BufRead,BufNewFile *.proto setfiletype proto
augroup end
colorscheme darkblue
if has("vms")
set nobackup
else
set backup
endif
map <F4> :Tlist<CR><CR>
let Tlist_Show_One_File=1
let Tlist_Use_Right_Window=1
map <F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR><CR>
"set autochdir
"let Tlist_Ctags_Cmd = '/usr/bin/ctags'
"let Tlist_Show_One_File = 1
"let Tlist_Exit_OnlyWindow = 1
"let Tlist_Use_Left_Window = 0
"let Tlist_Sort_Type = 'name'
"let Tlist_Auto_Open = 1
"let Tlist_Auto_Update = 1
"let Tlist_WinWidth = 25
"let Tlist_Use_Right_Window= 1
"let Tlist_File_Fold_Auto_Close=1
"if $VIM_HATE_SPACE_ERRORS != '0'
"    let c_space_errors=1
"endif
if has("cscope")
if filereadable("cscope.out")
cs add cscope.out
elseif $CSCOPE_DB != ""
cs add $CSCOPE_DB
endif
"set cscopequickfix=s-,c-,d-,i-,t-,e-
nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>

nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :scs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

nmap <C-\><C-\>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\><C-\>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\><C-\>i :vert scs find i <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\><C-\>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif
"自动插入文件头
    autocmd BufNewFile *.sh,*.py,*.lua,*.h,*.hpp,*.c,*.cc,*.cpp,*.htm,*.html,*.xml,*.proto,CMakeLists.txt exec ":call SetFileTitle()"
func! SetFileTitle()
    let l:ext = expand("%:e")
    "call append(line(".") - 1, "File Type:       " . &filetype)
    "call append(line(".") - 1, "File Name:       " . expand("%"))
    if &filetype == 'sh'
        call append(line(".") - 1, "\#!/bin/bash")
        call append(line(".") - 1, "\# Created By:      " . g:signature)
        call append(line(".") - 1, "\# Created Time:    " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "\# Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S"))
    elseif &filetype == 'python'
        call append(line(".") - 1, "\#!/usr/bin/env python")
        call append(line(".") - 1, "\# coding=utf-8")
        call append(line(".") - 1, "\# Created By:      " . g:signature)
        call append(line(".") - 1, "\# Created Time:    " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "\# Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "")
        call append(line(".") - 1, "if __name__ == \"__main__\":")
        call append(line(".") - 1, "    pass")
    elseif &filetype == 'lua'
        call append(line(".") - 1, "\#!/usr/bin/env lua")
        call append(line(".") - 1, "\-\- Created By:      " . g:signature)
        call append(line(".") - 1, "\-\- Created Time:    " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "\-\- Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S"))
    elseif l:ext == 'h'
        call append(line(".") - 1, "\/************************************************" )
        call append(line(".") - 1, " * @File Name:       " . expand("%"))
        call append(line(".") - 1, " * @Author:          " . g:signature)
        call append(line(".") - 1, " * @Mail:            " . g:mail)
        call append(line(".") - 1, " * @Created Time:    " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, " * @Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, " ***********************************************/")
        call append(line(".") - 1, "#include \<stdio.h\>")
        call append(line(".") - 1, "")
    elseif &filetype == 'c'
        call append(line(".") - 1, "\/************************************************" )
        call append(line(".") - 1, " * @File Name:       " . expand("%"))
        call append(line(".") - 1, " * @Author:          " . g:signature)
        call append(line(".") - 1, " * @Mail:            " . g:mail)
        call append(line(".") - 1, " * @Created Time:    " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, " * @Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, " ***********************************************/")
        call append(line(".") - 1, "#include \<stdio.h\>")
        call append(line(".") - 1, "")
    elseif &filetype == 'cpp'
        call append(line(".") - 1, "\/************************************************" )
        call append(line(".") - 1, " * @File Name:       " . expand("%"))
        call append(line(".") - 1, " * @Author:          " . g:signature)
        call append(line(".") - 1, " * @Mail:            " . g:mail)
        call append(line(".") - 1, " * @Created Time:    " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, " * @Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, " ***********************************************/")
        call append(line(".") - 1, "#include \<stdio.h\>")
        call append(line(".") - 1, "")
        "call append(line(".") - 1, "\/\/ Created By:      " . g:signature)
        "call append(line(".") - 1, "\/\/ Created Time:    " . strftime("%Y-%m-%d %H:%M:%S"))
        "call append(line(".") - 1, "\/\/ Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S"))
        "call append(line(".") - 1, "")
        "call append(line(".") - 1, "#include \<iostream\>")
        "call append(line(".") - 1, "")
        "call append(line(".") - 1, "using namespace std;")
        "call append(line(".") - 1, "")
        "call append(line(".") - 1, "int main(int argc, char *argv[]) {")
        "call append(line(".") - 1, "    return 0;")
        "call append(line(".") - 1, "}")
    elseif &filetype == 'html'
        call append(line(".") - 1, "<!--")
        call append(line(".") - 1, "Created By:      " . g:signature)
        call append(line(".") - 1, "Created Time:    " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "\-->")
        call append(line(".") - 1, "<html>")
        call append(line(".") - 1, "<head>")
        call append(line(".") - 1, "<title>Hello</title>")
        call append(line(".") - 1, "</head>")
        call append(line(".") - 1, "<body bgcolor=\"#ffffff\">")
        call append(line(".") - 1, "    Hello, world！")
        call append(line(".") - 1, "</body>")
        call append(line(".") - 1, "</html>")
    elseif &filetype == 'xml'
        call append(line(".") - 1, "<!--")
        call append(line(".") - 1, "Created By:      " . g:signature)
        call append(line(".") - 1, "Created Time:    " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "\-->")
        call append(line(".") - 1, "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>")
        call append(line(".") - 1, "<hello>")
        call append(line(".") - 1, "</hello>")
    elseif &filetype == 'proto'
        call append(line(".") - 1, "\/\/ Created By:      " . g:signature)
        call append(line(".") - 1, "\/\/ Created Time:    " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "\/\/ Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "")
        call append(line(".") - 1, "package company.app;")
        call append(line(".") - 1, "option optimize_for = SPEED; // SPEED, CODE_SIZE, LITE_RUNTIME")
        call append(line(".") - 1, "")
        call append(line(".") - 1, "message demo {")
        call append(line(".") - 1, "    required int64 accid = 1;")
        call append(line(".") - 1, "    optional bool sex = 2;")
        call append(line(".") - 1, "    repeated string book = 3;")
        call append(line(".") - 1, "}")
    elseif &filetype == 'cmake'
        call append(line(".") - 1, "\# Created By:      " . g:signature)
        call append(line(".") - 1, "\# Created Time:    " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "\# Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S"))
        call append(line(".") - 1, "cmake_minimum_required(VERSION 2.7.4 FATAL_ERROR)")
        call append(line(".") - 1, "project(DEMO)")
        "call append(line(".") - 1, "set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Werror -fno-strict-aliasing\")")
        "call append(line(".") - 1, "set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -O0 -D_DEBUG\")")
        "call append(line(".") - 1, "set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")")
        "call append(line(".") - 1, "message(STATUS \"Compile flag: ${CMAKE_CXX_FLAGS}\")")
        "call append(line(".") - 1, "message(STATUS \"Cmake build type: ${CMAKE_BUILD_TYPE}\")")
        "call append(line(".") - 1, "message(STATUS \"Debug mode flag: ${CMAKE_CXX_FLAGS_DEBUG}\")")
        "call append(line(".") - 1, "message(STATUS \"Release mode flag: ${CMAKE_CXX_FLAGS_RELEASE}\")")
        "call append(line(".") - 1, "message(STATUS \"Project binary dir: ${PROJECT_BINARY_DIR}\")")
        "call append(line(".") - 1, "message(STATUS \"Project source dir: ${PROJECT_SOURCE_DIR}\")")
        "call append(line(".") - 1, "message(STATUS \"Cmake binary dir: ${CMAKE_BINARY_DIR}\")")
        "call append(line(".") - 1, "message(STATUS \"Cmake source dir: ${CMAKE_SOURCE_DIR}\")")
        "call append(line(".") - 1, "message(STATUS \"Cmake current binary dir: ${CMAKE_CURRENT_BINARY_DIR}\")")
        "call append(line(".") - 1, "message(STATUS \"Cmake current source dir: ${CMAKE_CURRENT_SOURCE_DIR}\")")
        "call append(line(".") - 1, "message(STATUS \"Demo binary dir: ${DEMO_BINARY_DIR}\")")
        "call append(line(".") - 1, "message(STATUS \"Demo source dir: ${DEMO_SOURCE_DIR}\")")
        "call append(line(".") - 1, "set(CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_SOURCE_DIR}/bin\")")
        "call append(line(".") - 1, "set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_SOURCE_DIR}/lib\")")
        "call append(line(".") - 1, "set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_SOURCE_DIR}/lib\")")
        "call append(line(".") - 1, "set(CMAKE_MODULE_OUTPUT_DIRECTORY \"${CMAKE_SOURCE_DIR}/mod\")")
        "call append(line(".") - 1, "")
        "call append(line(".") - 1, "include_directories(${PROJECT_SOURCE_DIR})")
        "call append(line(".") - 1, "link_directories(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})")
        "call append(line(".") - 1, "link_directories(${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})")
        "call append(line(".") - 1, "link_directories(${CMAKE_MODULE_OUTPUT_DIRECTORY})")
        "call append(line(".") - 1, "")
        "call append(line(".") - 1, "add_custom_command(")
        "call append(line(".") - 1, "DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/hello.rl")
        "call append(line(".") - 1, "OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/hello.rl.cpp")
        "call append(line(".") - 1, "COMMAND ragel -C ${CMAKE_CURRENT_SOURCE_DIR}/hello.rl -o ${CMAKE_CURRENT_BINARY_DIR}/hello.rl.cpp")
        "call append(line(".") - 1, ")")
        "call append(line(".") - 1, "")
        "call append(line(".") - 1, "SET(demo_src_list demo.cpp ${CMAKE_CURRENT_BINARY_DIR}/hello.rl.cpp)")
        "call append(line(".") - 1, "SET(demo_link_lib rt)")
        "call append(line(".") - 1, "#add_library(demo_a STATIC ${demo_src_list})")
        "call append(line(".") - 1, "#target_link_libraries(demo_a ${demo_link_lib})")
        "call append(line(".") - 1, "#set_target_properties(demo_a PROPERTIES OUTPUT_NAME \"demo\")")
        "call append(line(".") - 1, "#add_library(demo_so SHARED ${demo_src_list})")
        "call append(line(".") - 1, "#target_link_libraries(demo_so ${demo_link_lib})")
        "call append(line(".") - 1, "#set_target_properties(demo_so PROPERTIES OUTPUT_NAME \"demo\")")
        "call append(line(".") - 1, "add_executable(demo ${demo_src_list})")
        "call append(line(".") - 1, "target_link_libraries(demo ${demo_link_lib})")
        "call append(line(".") - 1, "#add_dependencies(demo demo_a demo_so)")
        "call append(line(".") - 1, "")
        "call append(line(".") - 1, "#add_subdirectory(src)")
    endif
    "自动定位到文件末尾
    "autocmd BufNewFile * normal g
endfunc

    autocmd BufWritePre,FileWritePre *.* exec ":call LastModified()"
func! LastModified()
    let l:lines = line("$")
        if l:lines > 10
    let l:lines = 10
    endif
    let l:cur_line = line(".")
    let l:cur_col = col(".")
    exe "1,".l:lines."s/Modified Time: .*/Modified Time:   " . strftime("%Y-%m-%d %H:%M:%S") . "/e"
    call cursor(l:cur_line, l:cur_col)
endfunc

"-------------------------------------------NERD_tree.vim-------------------->>
"设置快捷键"
noremap <F2> :NERDTreeToggle<cr>

noremap <F3> :call ToggleSketch()<cr>
"禁用所有与NERD_tree有关的命令"
"let loaded_nerd_tree=1
"不显示指定的类型的文件"
"let NERDTreeIgnore=['/.vim$', '/~$']
"不显示隐藏文件(好像只在linux环境中有效)"
let NERDTreeShowHidden=0
"排序"
let NERDTreeSortOrder=['//$','/.cpp$','/.c$', '/.h$', '/.py$', '/.lua$', '*']
"不分大小写排序"
let NERDTreeCaseSensitiveSort=0
"设置窗口尺寸"
"let NERDTreeWinSize=30
"是否显示行号"
"let NERDTreeShowLineNumbers=1
"是否显示书签"
"let NERDTreeShowBookmarks=1
"打开文件后, 关闭NERDTrre窗口"
"let NERDTreeQuitOnOpen=1
"高亮NERDTrre窗口的当前行"
let NERDTreeHighlightCursorline=1
